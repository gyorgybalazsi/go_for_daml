// Code generated by protoc-gen-go. DO NOT EDIT.
// source: com/digitalasset/ledger/api/v1/command_submission_service.proto

package com_digitalasset_ledger_api_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protobuf "google/protobuf"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The submitted commands will be processed atomically in a single transaction. Moreover, each ``Command`` in ``commands`` will be executed in the order specified by the request.
type SubmitRequest struct {
	// The commands to be submitted in a single transaction.
	// Required
	Commands *Commands `protobuf:"bytes,1,opt,name=commands,proto3" json:"commands,omitempty"`
	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *SubmitRequest) Reset()         { *m = SubmitRequest{} }
func (m *SubmitRequest) String() string { return proto.CompactTextString(m) }
func (*SubmitRequest) ProtoMessage()    {}
func (*SubmitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_99dbf056a645b098, []int{0}
}

func (m *SubmitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubmitRequest.Unmarshal(m, b)
}
func (m *SubmitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubmitRequest.Marshal(b, m, deterministic)
}
func (m *SubmitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubmitRequest.Merge(m, src)
}
func (m *SubmitRequest) XXX_Size() int {
	return xxx_messageInfo_SubmitRequest.Size(m)
}
func (m *SubmitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubmitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubmitRequest proto.InternalMessageInfo

func (m *SubmitRequest) GetCommands() *Commands {
	if m != nil {
		return m.Commands
	}
	return nil
}

func (m *SubmitRequest) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

func init() {
	proto.RegisterType((*SubmitRequest)(nil), "com.digitalasset.ledger.api.v1.SubmitRequest")
}

func init() {
	proto.RegisterFile("com/digitalasset/ledger/api/v1/command_submission_service.proto", fileDescriptor_99dbf056a645b098)
}

var fileDescriptor_99dbf056a645b098 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xc1, 0x4e, 0x83, 0x40,
	0x10, 0x86, 0xd3, 0x4b, 0x35, 0xab, 0xbd, 0x70, 0x30, 0x04, 0x13, 0x63, 0x7a, 0xea, 0xc1, 0xce,
	0xa6, 0xf8, 0x00, 0x26, 0xa5, 0x9e, 0x9b, 0x80, 0x77, 0xb2, 0x2c, 0x23, 0xd9, 0xc8, 0xb2, 0xc8,
	0x0e, 0x44, 0x1f, 0xc9, 0x37, 0xf3, 0x31, 0x0c, 0x2c, 0x6d, 0xda, 0x83, 0xe2, 0x71, 0xb2, 0xf3,
	0x7f, 0xf3, 0xff, 0xff, 0xb2, 0x27, 0x69, 0x34, 0xcf, 0x55, 0xa1, 0x48, 0x94, 0xc2, 0x5a, 0x24,
	0x5e, 0x62, 0x5e, 0x60, 0xc3, 0x45, 0xad, 0x78, 0xb7, 0xe1, 0xd2, 0x68, 0x2d, 0xaa, 0x3c, 0xb5,
	0x6d, 0xa6, 0x95, 0xb5, 0xca, 0x54, 0xa9, 0xc5, 0xa6, 0x53, 0x12, 0xa1, 0x6e, 0x0c, 0x19, 0xef,
	0x4e, 0x1a, 0x0d, 0xa7, 0x00, 0x70, 0x00, 0x10, 0xb5, 0x82, 0x6e, 0x13, 0x84, 0x13, 0x07, 0xa8,
	0x11, 0x12, 0x53, 0x69, 0x2a, 0xc2, 0x0f, 0x72, 0xcc, 0x60, 0xfd, 0x3f, 0x53, 0x76, 0x5c, 0xbf,
	0x2d, 0x8c, 0x29, 0x4a, 0xe4, 0xc3, 0x94, 0xb5, 0xaf, 0x1c, 0x75, 0x4d, 0x9f, 0xee, 0x71, 0xf9,
	0x35, 0x63, 0x8b, 0xa4, 0x37, 0x4f, 0x31, 0xbe, 0xb7, 0x68, 0xc9, 0xdb, 0xb1, 0xcb, 0x03, 0xc0,
	0x9f, 0xdd, 0xcf, 0x56, 0x57, 0xe1, 0x0a, 0xfe, 0x0e, 0x01, 0xd1, 0xb8, 0x1f, 0x1f, 0x95, 0x5e,
	0xcc, 0x16, 0x67, 0xd6, 0xfd, 0xef, 0x8b, 0x81, 0xf5, 0x30, 0xc5, 0x7a, 0xe9, 0x55, 0x91, 0x13,
	0xc5, 0xd7, 0x74, 0x32, 0x85, 0x6f, 0xcc, 0x1f, 0x2f, 0x25, 0xc7, 0xba, 0x13, 0xd7, 0xb6, 0xb7,
	0x67, 0x73, 0x17, 0xc3, 0x5b, 0x4f, 0x5d, 0x38, 0x8b, 0x1b, 0xdc, 0x80, 0xab, 0x07, 0x0e, 0xf5,
	0xc0, 0x73, 0x5f, 0xcf, 0x76, 0xc7, 0x26, 0xbe, 0x6e, 0xbb, 0xfc, 0xcd, 0xcc, 0xbe, 0x25, 0x6c,
	0xa2, 0x5e, 0x93, 0xcd, 0x07, 0xea, 0xe3, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x84, 0xe4, 0x3e,
	0xb7, 0x48, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CommandSubmissionServiceClient is the client API for CommandSubmissionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CommandSubmissionServiceClient interface {
	// Submit a single composite command.
	Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*protobuf.Empty, error)
}

type commandSubmissionServiceClient struct {
	cc *grpc.ClientConn
}

func NewCommandSubmissionServiceClient(cc *grpc.ClientConn) CommandSubmissionServiceClient {
	return &commandSubmissionServiceClient{cc}
}

func (c *commandSubmissionServiceClient) Submit(ctx context.Context, in *SubmitRequest, opts ...grpc.CallOption) (*protobuf.Empty, error) {
	out := new(protobuf.Empty)
	err := c.cc.Invoke(ctx, "/com.digitalasset.ledger.api.v1.CommandSubmissionService/Submit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommandSubmissionServiceServer is the server API for CommandSubmissionService service.
type CommandSubmissionServiceServer interface {
	// Submit a single composite command.
	Submit(context.Context, *SubmitRequest) (*protobuf.Empty, error)
}

// UnimplementedCommandSubmissionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCommandSubmissionServiceServer struct {
}

func (*UnimplementedCommandSubmissionServiceServer) Submit(ctx context.Context, req *SubmitRequest) (*protobuf.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Submit not implemented")
}

func RegisterCommandSubmissionServiceServer(s *grpc.Server, srv CommandSubmissionServiceServer) {
	s.RegisterService(&_CommandSubmissionService_serviceDesc, srv)
}

func _CommandSubmissionService_Submit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommandSubmissionServiceServer).Submit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.ledger.api.v1.CommandSubmissionService/Submit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommandSubmissionServiceServer).Submit(ctx, req.(*SubmitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CommandSubmissionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.ledger.api.v1.CommandSubmissionService",
	HandlerType: (*CommandSubmissionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Submit",
			Handler:    _CommandSubmissionService_Submit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/digitalasset/ledger/api/v1/command_submission_service.proto",
}
