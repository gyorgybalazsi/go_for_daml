// Code generated by protoc-gen-go. DO NOT EDIT.
// source: com/digitalasset/ledger/api/v1/transaction.proto

package com_digitalasset_ledger_api_v1

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	protobuf "google/protobuf"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Complete view of an on-ledger transaction.
type TransactionTree struct {
	// Assigned by the server. Useful for correlating logs.
	// Required
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
	// Optional
	CommandId string `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// The workflow ID used in command submission. Only set if the ``workflow_id`` for the command was set.
	// Optional
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Ledger effective time.
	// Required
	EffectiveAt *protobuf.Timestamp `protobuf:"bytes,4,opt,name=effective_at,json=effectiveAt,proto3" json:"effective_at,omitempty"`
	// The absolute offset. The format of this field is described in ``ledger_offset.proto``.
	// Required
	Offset string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	// Changes to the ledger that were caused by this transaction. Nodes of the transaction tree.
	// Required
	EventsById map[string]*TreeEvent `protobuf:"bytes,7,rep,name=events_by_id,json=eventsById,proto3" json:"events_by_id,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Roots of the transaction tree.
	// Required
	RootEventIds []string `protobuf:"bytes,8,rep,name=root_event_ids,json=rootEventIds,proto3" json:"root_event_ids,omitempty"`
	// Zipkin trace context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *TransactionTree) Reset()         { *m = TransactionTree{} }
func (m *TransactionTree) String() string { return proto.CompactTextString(m) }
func (*TransactionTree) ProtoMessage()    {}
func (*TransactionTree) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab8edc86230f7d, []int{0}
}

func (m *TransactionTree) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TransactionTree.Unmarshal(m, b)
}
func (m *TransactionTree) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TransactionTree.Marshal(b, m, deterministic)
}
func (m *TransactionTree) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TransactionTree.Merge(m, src)
}
func (m *TransactionTree) XXX_Size() int {
	return xxx_messageInfo_TransactionTree.Size(m)
}
func (m *TransactionTree) XXX_DiscardUnknown() {
	xxx_messageInfo_TransactionTree.DiscardUnknown(m)
}

var xxx_messageInfo_TransactionTree proto.InternalMessageInfo

func (m *TransactionTree) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *TransactionTree) GetCommandId() string {
	if m != nil {
		return m.CommandId
	}
	return ""
}

func (m *TransactionTree) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *TransactionTree) GetEffectiveAt() *protobuf.Timestamp {
	if m != nil {
		return m.EffectiveAt
	}
	return nil
}

func (m *TransactionTree) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *TransactionTree) GetEventsById() map[string]*TreeEvent {
	if m != nil {
		return m.EventsById
	}
	return nil
}

func (m *TransactionTree) GetRootEventIds() []string {
	if m != nil {
		return m.RootEventIds
	}
	return nil
}

func (m *TransactionTree) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

type TreeEvent struct {
	// Types that are valid to be assigned to Kind:
	//	*TreeEvent_Created
	//	*TreeEvent_Exercised
	Kind                 isTreeEvent_Kind `protobuf_oneof:"kind"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TreeEvent) Reset()         { *m = TreeEvent{} }
func (m *TreeEvent) String() string { return proto.CompactTextString(m) }
func (*TreeEvent) ProtoMessage()    {}
func (*TreeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab8edc86230f7d, []int{1}
}

func (m *TreeEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TreeEvent.Unmarshal(m, b)
}
func (m *TreeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TreeEvent.Marshal(b, m, deterministic)
}
func (m *TreeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TreeEvent.Merge(m, src)
}
func (m *TreeEvent) XXX_Size() int {
	return xxx_messageInfo_TreeEvent.Size(m)
}
func (m *TreeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TreeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TreeEvent proto.InternalMessageInfo

type isTreeEvent_Kind interface {
	isTreeEvent_Kind()
}

type TreeEvent_Created struct {
	Created *CreatedEvent `protobuf:"bytes,1,opt,name=created,proto3,oneof"`
}

type TreeEvent_Exercised struct {
	Exercised *ExercisedEvent `protobuf:"bytes,2,opt,name=exercised,proto3,oneof"`
}

func (*TreeEvent_Created) isTreeEvent_Kind() {}

func (*TreeEvent_Exercised) isTreeEvent_Kind() {}

func (m *TreeEvent) GetKind() isTreeEvent_Kind {
	if m != nil {
		return m.Kind
	}
	return nil
}

func (m *TreeEvent) GetCreated() *CreatedEvent {
	if x, ok := m.GetKind().(*TreeEvent_Created); ok {
		return x.Created
	}
	return nil
}

func (m *TreeEvent) GetExercised() *ExercisedEvent {
	if x, ok := m.GetKind().(*TreeEvent_Exercised); ok {
		return x.Exercised
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TreeEvent) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TreeEvent_Created)(nil),
		(*TreeEvent_Exercised)(nil),
	}
}

// Filtered view of an on-ledger transaction.
type Transaction struct {
	// Assigned by the server. Useful for correlating logs.
	// Required
	TransactionId string `protobuf:"bytes,1,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The ID of the command which resulted in this transaction. Missing for everyone except the submitting party.
	// Optional
	CommandId string `protobuf:"bytes,2,opt,name=command_id,json=commandId,proto3" json:"command_id,omitempty"`
	// The workflow ID used in command submission.
	// Optional
	WorkflowId string `protobuf:"bytes,3,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// Ledger effective time.
	// Required
	EffectiveAt *protobuf.Timestamp `protobuf:"bytes,4,opt,name=effective_at,json=effectiveAt,proto3" json:"effective_at,omitempty"`
	// The collection of events.
	// Only contains ``CreatedEvent`` or ``ArchivedEvent``.
	// Required
	Events []*Event `protobuf:"bytes,5,rep,name=events,proto3" json:"events,omitempty"`
	// The absolute offset. The format of this field is described in ``ledger_offset.proto``.
	// Required
	Offset string `protobuf:"bytes,6,opt,name=offset,proto3" json:"offset,omitempty"`
	// Zipkin trace context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Transaction) Reset()         { *m = Transaction{} }
func (m *Transaction) String() string { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()    {}
func (*Transaction) Descriptor() ([]byte, []int) {
	return fileDescriptor_73ab8edc86230f7d, []int{2}
}

func (m *Transaction) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Transaction.Unmarshal(m, b)
}
func (m *Transaction) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Transaction.Marshal(b, m, deterministic)
}
func (m *Transaction) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transaction.Merge(m, src)
}
func (m *Transaction) XXX_Size() int {
	return xxx_messageInfo_Transaction.Size(m)
}
func (m *Transaction) XXX_DiscardUnknown() {
	xxx_messageInfo_Transaction.DiscardUnknown(m)
}

var xxx_messageInfo_Transaction proto.InternalMessageInfo

func (m *Transaction) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *Transaction) GetCommandId() string {
	if m != nil {
		return m.CommandId
	}
	return ""
}

func (m *Transaction) GetWorkflowId() string {
	if m != nil {
		return m.WorkflowId
	}
	return ""
}

func (m *Transaction) GetEffectiveAt() *protobuf.Timestamp {
	if m != nil {
		return m.EffectiveAt
	}
	return nil
}

func (m *Transaction) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func (m *Transaction) GetOffset() string {
	if m != nil {
		return m.Offset
	}
	return ""
}

func (m *Transaction) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

func init() {
	proto.RegisterType((*TransactionTree)(nil), "com.digitalasset.ledger.api.v1.TransactionTree")
	proto.RegisterMapType((map[string]*TreeEvent)(nil), "com.digitalasset.ledger.api.v1.TransactionTree.EventsByIdEntry")
	proto.RegisterType((*TreeEvent)(nil), "com.digitalasset.ledger.api.v1.TreeEvent")
	proto.RegisterType((*Transaction)(nil), "com.digitalasset.ledger.api.v1.Transaction")
}

func init() {
	proto.RegisterFile("com/digitalasset/ledger/api/v1/transaction.proto", fileDescriptor_73ab8edc86230f7d)
}

var fileDescriptor_73ab8edc86230f7d = []byte{
	// 510 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x5d, 0x8b, 0xd3, 0x40,
	0x14, 0xb5, 0x1f, 0xdb, 0xda, 0x9b, 0xee, 0xae, 0x0c, 0x28, 0xa1, 0xa0, 0x5b, 0x8a, 0x0b, 0x55,
	0x64, 0xe2, 0xd6, 0x07, 0x45, 0x58, 0x16, 0x5b, 0x0a, 0xdb, 0x17, 0x85, 0xd0, 0xf7, 0x30, 0x9d,
	0xb9, 0xa9, 0x43, 0x9b, 0x4c, 0x99, 0x4c, 0xbb, 0xdb, 0x3f, 0xe2, 0xbf, 0xf0, 0x2f, 0xf9, 0xec,
	0xcf, 0x90, 0x4c, 0x92, 0x6e, 0x5c, 0xd0, 0xec, 0x8b, 0x0f, 0xbe, 0x75, 0xee, 0x9c, 0x73, 0xe6,
	0xdc, 0x7b, 0x6e, 0x03, 0x6f, 0xb9, 0x8a, 0x3c, 0x21, 0x97, 0xd2, 0xb0, 0x35, 0x4b, 0x12, 0x34,
	0xde, 0x1a, 0xc5, 0x12, 0xb5, 0xc7, 0x36, 0xd2, 0xdb, 0x5d, 0x78, 0x46, 0xb3, 0x38, 0x61, 0xdc,
	0x48, 0x15, 0xd3, 0x8d, 0x56, 0x46, 0x91, 0x17, 0x5c, 0x45, 0xb4, 0xcc, 0xa0, 0x19, 0x83, 0xb2,
	0x8d, 0xa4, 0xbb, 0x8b, 0xde, 0xeb, 0x0a, 0x45, 0xdc, 0x61, 0x6c, 0x32, 0xad, 0xde, 0xa8, 0xfa,
	0x75, 0x8e, 0x01, 0x57, 0xb1, 0xc1, 0xdb, 0x82, 0x73, 0xb6, 0x54, 0x6a, 0xb9, 0x46, 0xcf, 0x9e,
	0x16, 0xdb, 0xd0, 0x33, 0x32, 0xc2, 0xc4, 0xb0, 0x68, 0x93, 0x01, 0x06, 0xdf, 0x9a, 0x70, 0x3a,
	0xbf, 0xb3, 0x3d, 0xd7, 0x88, 0xe4, 0x1c, 0x4e, 0x4a, 0x9d, 0x04, 0x52, 0xb8, 0xb5, 0x7e, 0x6d,
	0xd8, 0xf1, 0x8f, 0x4b, 0xd5, 0x99, 0x20, 0xcf, 0x01, 0xb8, 0x8a, 0x22, 0x16, 0x8b, 0x14, 0x52,
	0xb7, 0x90, 0x4e, 0x5e, 0x99, 0x09, 0x72, 0x06, 0xce, 0x8d, 0xd2, 0xab, 0x70, 0xad, 0x6e, 0xd2,
	0xfb, 0x86, 0xbd, 0x87, 0xa2, 0x34, 0x13, 0xe4, 0x12, 0xba, 0x18, 0x86, 0xc8, 0x8d, 0xdc, 0x61,
	0xc0, 0x8c, 0xdb, 0xec, 0xd7, 0x86, 0xce, 0xa8, 0x47, 0x33, 0xcb, 0xb4, 0xb0, 0x4c, 0xe7, 0x85,
	0x65, 0xdf, 0x39, 0xe0, 0x3f, 0x19, 0xf2, 0x0c, 0x5a, 0x2a, 0x0c, 0x13, 0x34, 0x6e, 0xcb, 0x4a,
	0xe7, 0x27, 0xc2, 0xa0, 0x6b, 0xa7, 0x96, 0x04, 0x8b, 0x7d, 0xfa, 0x70, 0xbb, 0xdf, 0x18, 0x3a,
	0xa3, 0x2b, 0xfa, 0xf7, 0x24, 0xe8, 0xbd, 0x21, 0xd0, 0xa9, 0xd5, 0x18, 0xef, 0x67, 0x62, 0x1a,
	0x1b, 0xbd, 0xf7, 0x01, 0x0f, 0x05, 0xf2, 0x12, 0x4e, 0xb4, 0x52, 0x26, 0xb0, 0xa5, 0x40, 0x8a,
	0xc4, 0x7d, 0xdc, 0x6f, 0x0c, 0x3b, 0x7e, 0x37, 0xad, 0x5a, 0xe2, 0x4c, 0x24, 0xc4, 0x87, 0xe3,
	0xdf, 0x22, 0x71, 0x7f, 0xb6, 0x6d, 0x87, 0x6f, 0x1e, 0x60, 0x85, 0xe3, 0x24, 0x23, 0xf9, 0x5d,
	0x53, 0x3a, 0xf5, 0xbe, 0xc2, 0xe9, 0x3d, 0x63, 0xe4, 0x09, 0x34, 0x56, 0xb8, 0xcf, 0x23, 0x4a,
	0x7f, 0x92, 0x2b, 0x38, 0xda, 0xb1, 0xf5, 0x16, 0x6d, 0x26, 0xce, 0xe8, 0x55, 0xf5, 0x7b, 0x88,
	0x56, 0xd5, 0xcf, 0x78, 0x1f, 0xeb, 0x1f, 0x6a, 0x83, 0xef, 0x35, 0xe8, 0x1c, 0x2e, 0xc8, 0x35,
	0xb4, 0xb9, 0x46, 0x66, 0x30, 0xdb, 0x85, 0x07, 0x34, 0x31, 0xc9, 0xe0, 0x96, 0x7e, 0xfd, 0xc8,
	0x2f, 0xe8, 0xe4, 0x33, 0x74, 0xf0, 0x16, 0x35, 0x97, 0x09, 0x8a, 0xdc, 0x20, 0xad, 0xd2, 0x9a,
	0x16, 0x84, 0x42, 0xed, 0x4e, 0x62, 0xdc, 0x82, 0xe6, 0x4a, 0xc6, 0x62, 0xf0, 0xa3, 0x0e, 0x4e,
	0x29, 0xc3, 0xff, 0x64, 0x89, 0x2f, 0xa1, 0x95, 0xed, 0x95, 0x7b, 0x64, 0xd7, 0xf4, 0xbc, 0x72,
	0x14, 0x36, 0xa7, 0x9c, 0xf4, 0xc7, 0xff, 0xc0, 0x3f, 0x58, 0xbd, 0xf1, 0x7b, 0xa8, 0xf8, 0x98,
	0x8d, 0x9f, 0x96, 0xe6, 0xff, 0x65, 0x6b, 0x50, 0x4f, 0x52, 0xd8, 0xa2, 0x65, 0x87, 0xf0, 0xee,
	0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x73, 0xc1, 0xc8, 0x60, 0x3e, 0x05, 0x00, 0x00,
}
