// Code generated by protoc-gen-go. DO NOT EDIT.
// source: com/digitalasset/ledger/api/v1/transaction_service.proto

package com_digitalasset_ledger_api_v1

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetTransactionsRequest struct {
	// Must correspond to the ledger ID reported by the Ledger Identification Service.
	// Required
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// Beginning of the requested ledger section.
	// Required
	Begin *LedgerOffset `protobuf:"bytes,2,opt,name=begin,proto3" json:"begin,omitempty"`
	// End of the requested ledger section.
	// Optional, if not set, the stream will not terminate.
	End *LedgerOffset `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	// Requesting parties with template filters.
	// Required
	Filter *TransactionFilter `protobuf:"bytes,4,opt,name=filter,proto3" json:"filter,omitempty"`
	// If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
	// In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
	// Optional
	Verbose bool `protobuf:"varint,5,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTransactionsRequest) Reset()         { *m = GetTransactionsRequest{} }
func (m *GetTransactionsRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsRequest) ProtoMessage()    {}
func (*GetTransactionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{0}
}

func (m *GetTransactionsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsRequest.Unmarshal(m, b)
}
func (m *GetTransactionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsRequest.Merge(m, src)
}
func (m *GetTransactionsRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsRequest.Size(m)
}
func (m *GetTransactionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsRequest proto.InternalMessageInfo

func (m *GetTransactionsRequest) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *GetTransactionsRequest) GetBegin() *LedgerOffset {
	if m != nil {
		return m.Begin
	}
	return nil
}

func (m *GetTransactionsRequest) GetEnd() *LedgerOffset {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *GetTransactionsRequest) GetFilter() *TransactionFilter {
	if m != nil {
		return m.Filter
	}
	return nil
}

func (m *GetTransactionsRequest) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *GetTransactionsRequest) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

type GetTransactionsResponse struct {
	// The list of transactions that matches the filter in GetTransactionsRequest for the GetTransactions method.
	Transactions         []*Transaction `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *GetTransactionsResponse) Reset()         { *m = GetTransactionsResponse{} }
func (m *GetTransactionsResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionsResponse) ProtoMessage()    {}
func (*GetTransactionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{1}
}

func (m *GetTransactionsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionsResponse.Unmarshal(m, b)
}
func (m *GetTransactionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionsResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionsResponse.Merge(m, src)
}
func (m *GetTransactionsResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionsResponse.Size(m)
}
func (m *GetTransactionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionsResponse proto.InternalMessageInfo

func (m *GetTransactionsResponse) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetTransactionTreesResponse struct {
	// The list of transaction trees that matches the filter in ``GetTransactionsRequest`` for the ``GetTransactionTrees`` method.
	Transactions         []*TransactionTree `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *GetTransactionTreesResponse) Reset()         { *m = GetTransactionTreesResponse{} }
func (m *GetTransactionTreesResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionTreesResponse) ProtoMessage()    {}
func (*GetTransactionTreesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{2}
}

func (m *GetTransactionTreesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionTreesResponse.Unmarshal(m, b)
}
func (m *GetTransactionTreesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionTreesResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionTreesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionTreesResponse.Merge(m, src)
}
func (m *GetTransactionTreesResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionTreesResponse.Size(m)
}
func (m *GetTransactionTreesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionTreesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionTreesResponse proto.InternalMessageInfo

func (m *GetTransactionTreesResponse) GetTransactions() []*TransactionTree {
	if m != nil {
		return m.Transactions
	}
	return nil
}

type GetTransactionByEventIdRequest struct {
	// Must correspond to the ledger ID reported by the Ledger Identification Service.
	// Required
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// The ID of a particular event.
	// Required
	EventId string `protobuf:"bytes,2,opt,name=event_id,json=eventId,proto3" json:"event_id,omitempty"`
	// The parties whose events the client expects to see.
	// Events that are not visible for the parties in this collection will not be present in the response.
	// Required
	RequestingParties []string `protobuf:"bytes,3,rep,name=requesting_parties,json=requestingParties,proto3" json:"requesting_parties,omitempty"`
	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTransactionByEventIdRequest) Reset()         { *m = GetTransactionByEventIdRequest{} }
func (m *GetTransactionByEventIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByEventIdRequest) ProtoMessage()    {}
func (*GetTransactionByEventIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{3}
}

func (m *GetTransactionByEventIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionByEventIdRequest.Unmarshal(m, b)
}
func (m *GetTransactionByEventIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionByEventIdRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionByEventIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByEventIdRequest.Merge(m, src)
}
func (m *GetTransactionByEventIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionByEventIdRequest.Size(m)
}
func (m *GetTransactionByEventIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByEventIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByEventIdRequest proto.InternalMessageInfo

func (m *GetTransactionByEventIdRequest) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *GetTransactionByEventIdRequest) GetEventId() string {
	if m != nil {
		return m.EventId
	}
	return ""
}

func (m *GetTransactionByEventIdRequest) GetRequestingParties() []string {
	if m != nil {
		return m.RequestingParties
	}
	return nil
}

func (m *GetTransactionByEventIdRequest) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

type GetTransactionByIdRequest struct {
	// Must correspond to the ledger ID reported by the Ledger Identification Service.
	// Required
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// The ID of a particular transaction.
	// Required
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// The parties whose events the client expects to see.
	// Events that are not visible for the parties in this collection will not be present in the response.
	// Required
	RequestingParties []string `protobuf:"bytes,3,rep,name=requesting_parties,json=requestingParties,proto3" json:"requesting_parties,omitempty"`
	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetTransactionByIdRequest) Reset()         { *m = GetTransactionByIdRequest{} }
func (m *GetTransactionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*GetTransactionByIdRequest) ProtoMessage()    {}
func (*GetTransactionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{4}
}

func (m *GetTransactionByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionByIdRequest.Unmarshal(m, b)
}
func (m *GetTransactionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionByIdRequest.Marshal(b, m, deterministic)
}
func (m *GetTransactionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionByIdRequest.Merge(m, src)
}
func (m *GetTransactionByIdRequest) XXX_Size() int {
	return xxx_messageInfo_GetTransactionByIdRequest.Size(m)
}
func (m *GetTransactionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionByIdRequest proto.InternalMessageInfo

func (m *GetTransactionByIdRequest) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *GetTransactionByIdRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *GetTransactionByIdRequest) GetRequestingParties() []string {
	if m != nil {
		return m.RequestingParties
	}
	return nil
}

func (m *GetTransactionByIdRequest) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

type GetTransactionResponse struct {
	Transaction          *TransactionTree `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetTransactionResponse) Reset()         { *m = GetTransactionResponse{} }
func (m *GetTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*GetTransactionResponse) ProtoMessage()    {}
func (*GetTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{5}
}

func (m *GetTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetTransactionResponse.Unmarshal(m, b)
}
func (m *GetTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetTransactionResponse.Marshal(b, m, deterministic)
}
func (m *GetTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTransactionResponse.Merge(m, src)
}
func (m *GetTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_GetTransactionResponse.Size(m)
}
func (m *GetTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTransactionResponse proto.InternalMessageInfo

func (m *GetTransactionResponse) GetTransaction() *TransactionTree {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetFlatTransactionResponse struct {
	Transaction          *Transaction `protobuf:"bytes,1,opt,name=transaction,proto3" json:"transaction,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *GetFlatTransactionResponse) Reset()         { *m = GetFlatTransactionResponse{} }
func (m *GetFlatTransactionResponse) String() string { return proto.CompactTextString(m) }
func (*GetFlatTransactionResponse) ProtoMessage()    {}
func (*GetFlatTransactionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{6}
}

func (m *GetFlatTransactionResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetFlatTransactionResponse.Unmarshal(m, b)
}
func (m *GetFlatTransactionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetFlatTransactionResponse.Marshal(b, m, deterministic)
}
func (m *GetFlatTransactionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetFlatTransactionResponse.Merge(m, src)
}
func (m *GetFlatTransactionResponse) XXX_Size() int {
	return xxx_messageInfo_GetFlatTransactionResponse.Size(m)
}
func (m *GetFlatTransactionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetFlatTransactionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetFlatTransactionResponse proto.InternalMessageInfo

func (m *GetFlatTransactionResponse) GetTransaction() *Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

type GetLedgerEndRequest struct {
	// Must correspond to the ledger ID reported by the Ledger Identification Service.
	// Required
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext         *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetLedgerEndRequest) Reset()         { *m = GetLedgerEndRequest{} }
func (m *GetLedgerEndRequest) String() string { return proto.CompactTextString(m) }
func (*GetLedgerEndRequest) ProtoMessage()    {}
func (*GetLedgerEndRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{7}
}

func (m *GetLedgerEndRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLedgerEndRequest.Unmarshal(m, b)
}
func (m *GetLedgerEndRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLedgerEndRequest.Marshal(b, m, deterministic)
}
func (m *GetLedgerEndRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLedgerEndRequest.Merge(m, src)
}
func (m *GetLedgerEndRequest) XXX_Size() int {
	return xxx_messageInfo_GetLedgerEndRequest.Size(m)
}
func (m *GetLedgerEndRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLedgerEndRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetLedgerEndRequest proto.InternalMessageInfo

func (m *GetLedgerEndRequest) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *GetLedgerEndRequest) GetTraceContext() *TraceContext {
	if m != nil {
		return m.TraceContext
	}
	return nil
}

type GetLedgerEndResponse struct {
	// The absolute offset of the current ledger end.
	Offset               *LedgerOffset `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetLedgerEndResponse) Reset()         { *m = GetLedgerEndResponse{} }
func (m *GetLedgerEndResponse) String() string { return proto.CompactTextString(m) }
func (*GetLedgerEndResponse) ProtoMessage()    {}
func (*GetLedgerEndResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e3e1df00b0a368d, []int{8}
}

func (m *GetLedgerEndResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetLedgerEndResponse.Unmarshal(m, b)
}
func (m *GetLedgerEndResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetLedgerEndResponse.Marshal(b, m, deterministic)
}
func (m *GetLedgerEndResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetLedgerEndResponse.Merge(m, src)
}
func (m *GetLedgerEndResponse) XXX_Size() int {
	return xxx_messageInfo_GetLedgerEndResponse.Size(m)
}
func (m *GetLedgerEndResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetLedgerEndResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetLedgerEndResponse proto.InternalMessageInfo

func (m *GetLedgerEndResponse) GetOffset() *LedgerOffset {
	if m != nil {
		return m.Offset
	}
	return nil
}

func init() {
	proto.RegisterType((*GetTransactionsRequest)(nil), "com.digitalasset.ledger.api.v1.GetTransactionsRequest")
	proto.RegisterType((*GetTransactionsResponse)(nil), "com.digitalasset.ledger.api.v1.GetTransactionsResponse")
	proto.RegisterType((*GetTransactionTreesResponse)(nil), "com.digitalasset.ledger.api.v1.GetTransactionTreesResponse")
	proto.RegisterType((*GetTransactionByEventIdRequest)(nil), "com.digitalasset.ledger.api.v1.GetTransactionByEventIdRequest")
	proto.RegisterType((*GetTransactionByIdRequest)(nil), "com.digitalasset.ledger.api.v1.GetTransactionByIdRequest")
	proto.RegisterType((*GetTransactionResponse)(nil), "com.digitalasset.ledger.api.v1.GetTransactionResponse")
	proto.RegisterType((*GetFlatTransactionResponse)(nil), "com.digitalasset.ledger.api.v1.GetFlatTransactionResponse")
	proto.RegisterType((*GetLedgerEndRequest)(nil), "com.digitalasset.ledger.api.v1.GetLedgerEndRequest")
	proto.RegisterType((*GetLedgerEndResponse)(nil), "com.digitalasset.ledger.api.v1.GetLedgerEndResponse")
}

func init() {
	proto.RegisterFile("com/digitalasset/ledger/api/v1/transaction_service.proto", fileDescriptor_3e3e1df00b0a368d)
}

var fileDescriptor_3e3e1df00b0a368d = []byte{
	// 653 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0xcf, 0x8f, 0xd2, 0x40,
	0x18, 0xcd, 0x2c, 0xee, 0xb2, 0x7c, 0xb0, 0x1a, 0x47, 0xa3, 0xdd, 0xae, 0xd9, 0x10, 0x12, 0x13,
	0x12, 0xb5, 0x05, 0xd6, 0xb8, 0xfe, 0x48, 0x38, 0xb0, 0xee, 0x12, 0x12, 0x0d, 0xda, 0xe5, 0x68,
	0x42, 0x4a, 0xfb, 0x41, 0xea, 0xb2, 0x2d, 0xb6, 0xb3, 0xc4, 0xbd, 0x1b, 0xbd, 0x98, 0x18, 0x8f,
	0xfe, 0x6d, 0xde, 0x3c, 0x79, 0xd5, 0xbf, 0xc0, 0xb4, 0x53, 0xa1, 0x2d, 0x28, 0x1d, 0x70, 0x13,
	0x8f, 0xd3, 0xe9, 0x7b, 0xef, 0x7b, 0xdf, 0xcc, 0xbc, 0x19, 0x78, 0x68, 0x38, 0xa7, 0xaa, 0x69,
	0x0d, 0x2c, 0xa6, 0x0f, 0x75, 0xcf, 0x43, 0xa6, 0x0e, 0xd1, 0x1c, 0xa0, 0xab, 0xea, 0x23, 0x4b,
	0x1d, 0x57, 0x55, 0xe6, 0xea, 0xb6, 0xa7, 0x1b, 0xcc, 0x72, 0xec, 0xae, 0x87, 0xee, 0xd8, 0x32,
	0x50, 0x19, 0xb9, 0x0e, 0x73, 0xe8, 0xae, 0xe1, 0x9c, 0x2a, 0x51, 0xa4, 0xc2, 0x91, 0x8a, 0x3e,
	0xb2, 0x94, 0x71, 0x55, 0xae, 0x2d, 0x60, 0xe6, 0xa3, 0xae, 0xd3, 0xef, 0xfb, 0xd8, 0x80, 0x53,
	0xde, 0x17, 0xa8, 0xa6, 0x6f, 0x0d, 0x19, 0xba, 0x21, 0xb0, 0x92, 0x1e, 0x18, 0x22, 0x6a, 0x8b,
	0x11, 0x06, 0x76, 0x0d, 0xc7, 0x66, 0xf8, 0x36, 0x2c, 0xaf, 0xf4, 0x73, 0x0d, 0x6e, 0x34, 0x91,
	0x75, 0xa6, 0x64, 0x9e, 0x86, 0x6f, 0xce, 0xd0, 0x63, 0x74, 0x07, 0x72, 0xa1, 0x21, 0xcb, 0x94,
	0x48, 0x91, 0x94, 0x73, 0xda, 0x26, 0xff, 0xd0, 0x32, 0x69, 0x03, 0xd6, 0x7b, 0x38, 0xb0, 0x6c,
	0x69, 0xad, 0x48, 0xca, 0xf9, 0xda, 0x5d, 0xe5, 0xef, 0xad, 0x53, 0x9e, 0x05, 0xa3, 0x76, 0xd0,
	0x19, 0x8d, 0x43, 0x69, 0x1d, 0x32, 0x68, 0x9b, 0x52, 0x66, 0x09, 0x06, 0x1f, 0x48, 0x5b, 0xb0,
	0xc1, 0x3b, 0x26, 0x5d, 0x0a, 0x28, 0xaa, 0x8b, 0x28, 0x22, 0x2e, 0x8f, 0x02, 0xa0, 0x16, 0x12,
	0x50, 0x09, 0xb2, 0x63, 0x74, 0x7b, 0x8e, 0x87, 0xd2, 0x7a, 0x91, 0x94, 0x37, 0xb5, 0xdf, 0x43,
	0xaa, 0xc1, 0x56, 0xac, 0x6f, 0xd2, 0xf7, 0x6c, 0xba, 0x7a, 0x3b, 0x3e, 0xea, 0x80, 0x83, 0xb4,
	0x02, 0x8b, 0x8c, 0x4a, 0xaf, 0xe1, 0xe6, 0x4c, 0xcf, 0xbd, 0x91, 0x63, 0x7b, 0x48, 0xdb, 0x50,
	0x88, 0x2c, 0xac, 0x27, 0x91, 0x62, 0xa6, 0x9c, 0xaf, 0xdd, 0x11, 0x70, 0xa6, 0xc5, 0x08, 0x4a,
	0x2e, 0xec, 0xc4, 0xb5, 0x3a, 0x2e, 0xe2, 0x54, 0xef, 0x78, 0xae, 0x9e, 0x2a, 0xa0, 0xe7, 0xf3,
	0x25, 0x34, 0xbf, 0x12, 0xd8, 0x8d, 0x8b, 0x36, 0xce, 0x0f, 0xc7, 0x68, 0xb3, 0x96, 0x99, 0x6a,
	0x73, 0x6d, 0xc3, 0x26, 0xfa, 0xbf, 0xfb, 0x73, 0x6b, 0xc1, 0x5c, 0x16, 0x39, 0x9c, 0xde, 0x03,
	0xea, 0x72, 0x0a, 0xcb, 0x1e, 0x74, 0x47, 0xba, 0xcb, 0x2c, 0xf4, 0xa4, 0x4c, 0x31, 0x53, 0xce,
	0x69, 0x57, 0xa7, 0x33, 0x2f, 0xf8, 0xc4, 0x85, 0xac, 0xde, 0x37, 0x02, 0xdb, 0x49, 0x77, 0x29,
	0x8d, 0xdd, 0x86, 0xcb, 0xd1, 0xf3, 0x3e, 0xb1, 0xb7, 0x15, 0xf9, 0xfa, 0x7f, 0x98, 0x3c, 0x49,
	0xc6, 0xc2, 0x64, 0xc7, 0xbc, 0x84, 0x7c, 0xa4, 0xda, 0xc0, 0xe2, 0x12, 0x1b, 0x26, 0xca, 0x51,
	0x3a, 0x01, 0xb9, 0x89, 0xec, 0x68, 0xa8, 0xcf, 0x15, 0x7c, 0x3e, 0x4f, 0x50, 0xe8, 0x44, 0xc4,
	0xc4, 0xde, 0x13, 0xb8, 0xd6, 0x44, 0xc6, 0xe3, 0xe4, 0xd0, 0x4e, 0xb7, 0x70, 0x17, 0xd1, 0xe2,
	0x57, 0x70, 0x3d, 0x5e, 0x47, 0xe8, 0xf7, 0x29, 0x6c, 0xf0, 0x1b, 0x24, 0xb4, 0x2a, 0x96, 0x8c,
	0x21, 0xb6, 0xf6, 0x23, 0x0b, 0x34, 0xd2, 0x83, 0x63, 0x7e, 0xd1, 0xd1, 0x77, 0x04, 0xae, 0x24,
	0xb2, 0x87, 0x3e, 0x58, 0x24, 0x30, 0xff, 0x82, 0x90, 0xf7, 0x85, 0x71, 0xdc, 0x61, 0x85, 0xd0,
	0x8f, 0x7c, 0x11, 0x92, 0xb1, 0xb4, 0x74, 0x29, 0x4f, 0xc4, 0x70, 0xb1, 0x0c, 0xac, 0x10, 0xfa,
	0x99, 0x24, 0x13, 0x79, 0x12, 0x58, 0xb4, 0x2e, 0x46, 0x9d, 0x4c, 0x3a, 0x59, 0xd0, 0xd2, 0x64,
	0x1b, 0x7c, 0x20, 0x40, 0x67, 0x63, 0x86, 0x3e, 0x12, 0x2d, 0x67, 0xf5, 0x4a, 0xbe, 0x90, 0xe0,
	0x0e, 0x49, 0x9c, 0xcf, 0x7f, 0xd7, 0xa1, 0xc7, 0x29, 0xf0, 0x7f, 0x0a, 0x87, 0x4f, 0x24, 0x08,
	0xaa, 0x99, 0xda, 0x56, 0xeb, 0xd4, 0x2a, 0x15, 0x9d, 0x43, 0x21, 0x7a, 0xac, 0xe9, 0x5e, 0x0a,
	0xae, 0x64, 0x18, 0xc9, 0xf7, 0xc5, 0x40, 0x5c, 0xba, 0x51, 0x87, 0x05, 0x2f, 0xd8, 0xc6, 0xad,
	0xd9, 0x48, 0x68, 0x9f, 0x31, 0x74, 0x0f, 0xfc, 0xbf, 0x7b, 0x1b, 0xc1, 0x9b, 0x70, 0xef, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x61, 0x78, 0xa3, 0xd6, 0x42, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TransactionServiceClient is the client API for TransactionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransactionServiceClient interface {
	// Read the ledger's filtered transaction stream for a set of parties.
	GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (TransactionService_GetTransactionsClient, error)
	// Read the ledger's complete transaction tree stream for a set of parties.
	GetTransactionTrees(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (TransactionService_GetTransactionTreesClient, error)
	// Lookup a transaction tree by the ID of an event that appears within it.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
	GetTransactionByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// Lookup a transaction tree by its ID.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
	GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error)
	// Lookup a transaction by the ID of an event that appears within it.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	GetFlatTransactionByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetFlatTransactionResponse, error)
	// Lookup a transaction by its ID.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	GetFlatTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetFlatTransactionResponse, error)
	// Get the current ledger end.
	// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
	GetLedgerEnd(ctx context.Context, in *GetLedgerEndRequest, opts ...grpc.CallOption) (*GetLedgerEndResponse, error)
}

type transactionServiceClient struct {
	cc *grpc.ClientConn
}

func NewTransactionServiceClient(cc *grpc.ClientConn) TransactionServiceClient {
	return &transactionServiceClient{cc}
}

func (c *transactionServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (TransactionService_GetTransactionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionService_serviceDesc.Streams[0], "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactions", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceGetTransactionsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_GetTransactionsClient interface {
	Recv() (*GetTransactionsResponse, error)
	grpc.ClientStream
}

type transactionServiceGetTransactionsClient struct {
	grpc.ClientStream
}

func (x *transactionServiceGetTransactionsClient) Recv() (*GetTransactionsResponse, error) {
	m := new(GetTransactionsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) GetTransactionTrees(ctx context.Context, in *GetTransactionsRequest, opts ...grpc.CallOption) (TransactionService_GetTransactionTreesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_TransactionService_serviceDesc.Streams[1], "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionTrees", opts...)
	if err != nil {
		return nil, err
	}
	x := &transactionServiceGetTransactionTreesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TransactionService_GetTransactionTreesClient interface {
	Recv() (*GetTransactionTreesResponse, error)
	grpc.ClientStream
}

type transactionServiceGetTransactionTreesClient struct {
	grpc.ClientStream
}

func (x *transactionServiceGetTransactionTreesClient) Recv() (*GetTransactionTreesResponse, error) {
	m := new(GetTransactionTreesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *transactionServiceClient) GetTransactionByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetTransactionResponse, error) {
	out := new(GetTransactionResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetFlatTransactionByEventId(ctx context.Context, in *GetTransactionByEventIdRequest, opts ...grpc.CallOption) (*GetFlatTransactionResponse, error) {
	out := new(GetFlatTransactionResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionByEventId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetFlatTransactionById(ctx context.Context, in *GetTransactionByIdRequest, opts ...grpc.CallOption) (*GetFlatTransactionResponse, error) {
	out := new(GetFlatTransactionResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transactionServiceClient) GetLedgerEnd(ctx context.Context, in *GetLedgerEndRequest, opts ...grpc.CallOption) (*GetLedgerEndResponse, error) {
	out := new(GetLedgerEndResponse)
	err := c.cc.Invoke(ctx, "/com.digitalasset.ledger.api.v1.TransactionService/GetLedgerEnd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransactionServiceServer is the server API for TransactionService service.
type TransactionServiceServer interface {
	// Read the ledger's filtered transaction stream for a set of parties.
	GetTransactions(*GetTransactionsRequest, TransactionService_GetTransactionsServer) error
	// Read the ledger's complete transaction tree stream for a set of parties.
	GetTransactionTrees(*GetTransactionsRequest, TransactionService_GetTransactionTreesServer) error
	// Lookup a transaction tree by the ID of an event that appears within it.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionByEventId
	GetTransactionByEventId(context.Context, *GetTransactionByEventIdRequest) (*GetTransactionResponse, error)
	// Lookup a transaction tree by its ID.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	// For looking up a transaction instead of a transaction tree, please see GetFlatTransactionById
	GetTransactionById(context.Context, *GetTransactionByIdRequest) (*GetTransactionResponse, error)
	// Lookup a transaction by the ID of an event that appears within it.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	GetFlatTransactionByEventId(context.Context, *GetTransactionByEventIdRequest) (*GetFlatTransactionResponse, error)
	// Lookup a transaction by its ID.
	// Returns ``NOT_FOUND`` if no such transaction exists.
	GetFlatTransactionById(context.Context, *GetTransactionByIdRequest) (*GetFlatTransactionResponse, error)
	// Get the current ledger end.
	// Subscriptions started with the returned offset will serve transactions created after this RPC was called.
	GetLedgerEnd(context.Context, *GetLedgerEndRequest) (*GetLedgerEndResponse, error)
}

// UnimplementedTransactionServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransactionServiceServer struct {
}

func (*UnimplementedTransactionServiceServer) GetTransactions(req *GetTransactionsRequest, srv TransactionService_GetTransactionsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}
func (*UnimplementedTransactionServiceServer) GetTransactionTrees(req *GetTransactionsRequest, srv TransactionService_GetTransactionTreesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTransactionTrees not implemented")
}
func (*UnimplementedTransactionServiceServer) GetTransactionByEventId(ctx context.Context, req *GetTransactionByEventIdRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionByEventId not implemented")
}
func (*UnimplementedTransactionServiceServer) GetTransactionById(ctx context.Context, req *GetTransactionByIdRequest) (*GetTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactionById not implemented")
}
func (*UnimplementedTransactionServiceServer) GetFlatTransactionByEventId(ctx context.Context, req *GetTransactionByEventIdRequest) (*GetFlatTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlatTransactionByEventId not implemented")
}
func (*UnimplementedTransactionServiceServer) GetFlatTransactionById(ctx context.Context, req *GetTransactionByIdRequest) (*GetFlatTransactionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFlatTransactionById not implemented")
}
func (*UnimplementedTransactionServiceServer) GetLedgerEnd(ctx context.Context, req *GetLedgerEndRequest) (*GetLedgerEndResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerEnd not implemented")
}

func RegisterTransactionServiceServer(s *grpc.Server, srv TransactionServiceServer) {
	s.RegisterService(&_TransactionService_serviceDesc, srv)
}

func _TransactionService_GetTransactions_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactions(m, &transactionServiceGetTransactionsServer{stream})
}

type TransactionService_GetTransactionsServer interface {
	Send(*GetTransactionsResponse) error
	grpc.ServerStream
}

type transactionServiceGetTransactionsServer struct {
	grpc.ServerStream
}

func (x *transactionServiceGetTransactionsServer) Send(m *GetTransactionsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_GetTransactionTrees_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetTransactionsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TransactionServiceServer).GetTransactionTrees(m, &transactionServiceGetTransactionTreesServer{stream})
}

type TransactionService_GetTransactionTreesServer interface {
	Send(*GetTransactionTreesResponse) error
	grpc.ServerStream
}

type transactionServiceGetTransactionTreesServer struct {
	grpc.ServerStream
}

func (x *transactionServiceGetTransactionTreesServer) Send(m *GetTransactionTreesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _TransactionService_GetTransactionByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionByEventId(ctx, req.(*GetTransactionByEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.ledger.api.v1.TransactionService/GetTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetFlatTransactionByEventId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByEventIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetFlatTransactionByEventId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionByEventId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetFlatTransactionByEventId(ctx, req.(*GetTransactionByEventIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetFlatTransactionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetFlatTransactionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.ledger.api.v1.TransactionService/GetFlatTransactionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetFlatTransactionById(ctx, req.(*GetTransactionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TransactionService_GetLedgerEnd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerEndRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransactionServiceServer).GetLedgerEnd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.digitalasset.ledger.api.v1.TransactionService/GetLedgerEnd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransactionServiceServer).GetLedgerEnd(ctx, req.(*GetLedgerEndRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransactionService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.digitalasset.ledger.api.v1.TransactionService",
	HandlerType: (*TransactionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactionByEventId",
			Handler:    _TransactionService_GetTransactionByEventId_Handler,
		},
		{
			MethodName: "GetTransactionById",
			Handler:    _TransactionService_GetTransactionById_Handler,
		},
		{
			MethodName: "GetFlatTransactionByEventId",
			Handler:    _TransactionService_GetFlatTransactionByEventId_Handler,
		},
		{
			MethodName: "GetFlatTransactionById",
			Handler:    _TransactionService_GetFlatTransactionById_Handler,
		},
		{
			MethodName: "GetLedgerEnd",
			Handler:    _TransactionService_GetLedgerEnd_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTransactions",
			Handler:       _TransactionService_GetTransactions_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetTransactionTrees",
			Handler:       _TransactionService_GetTransactionTrees_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/digitalasset/ledger/api/v1/transaction_service.proto",
}
