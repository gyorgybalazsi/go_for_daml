// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: admin/package_management_service.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackageManagementServiceClient is the client API for PackageManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackageManagementServiceClient interface {
	// Returns the details of all Daml-LF packages known to the backing participant.
	// Errors:
	// - ``UNAUTHENTICATED``: if the request does not include a valid access token
	// - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
	ListKnownPackages(ctx context.Context, in *ListKnownPackagesRequest, opts ...grpc.CallOption) (*ListKnownPackagesResponse, error)
	// Upload a DAR file to the backing participant.
	// Depending on the ledger implementation this might also make the package
	// available on the whole ledger. This call might not be supported by some
	// ledger implementations. Canton could be an example, where uploading a DAR
	// is not sufficient to render it usable, it must be activated first.
	// This call may:
	// - Succeed, if the package was successfully uploaded, or if the same package
	//   was already uploaded before.
	// - Respond with a gRPC error
	// Errors:
	// - ``UNAUTHENTICATED``: if the request does not include a valid access token
	// - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
	// - ``UNIMPLEMENTED``: if DAR package uploading is not supported by the backing participant
	// - ``INVALID_ARGUMENT``: if the DAR file is too big or malformed. The maximum supported size is implementation specific.
	UploadDarFile(ctx context.Context, in *UploadDarFileRequest, opts ...grpc.CallOption) (*UploadDarFileResponse, error)
}

type packageManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackageManagementServiceClient(cc grpc.ClientConnInterface) PackageManagementServiceClient {
	return &packageManagementServiceClient{cc}
}

func (c *packageManagementServiceClient) ListKnownPackages(ctx context.Context, in *ListKnownPackagesRequest, opts ...grpc.CallOption) (*ListKnownPackagesResponse, error) {
	out := new(ListKnownPackagesResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.admin.PackageManagementService/ListKnownPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *packageManagementServiceClient) UploadDarFile(ctx context.Context, in *UploadDarFileRequest, opts ...grpc.CallOption) (*UploadDarFileResponse, error) {
	out := new(UploadDarFileResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.admin.PackageManagementService/UploadDarFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PackageManagementServiceServer is the server API for PackageManagementService service.
// All implementations must embed UnimplementedPackageManagementServiceServer
// for forward compatibility
type PackageManagementServiceServer interface {
	// Returns the details of all Daml-LF packages known to the backing participant.
	// Errors:
	// - ``UNAUTHENTICATED``: if the request does not include a valid access token
	// - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
	ListKnownPackages(context.Context, *ListKnownPackagesRequest) (*ListKnownPackagesResponse, error)
	// Upload a DAR file to the backing participant.
	// Depending on the ledger implementation this might also make the package
	// available on the whole ledger. This call might not be supported by some
	// ledger implementations. Canton could be an example, where uploading a DAR
	// is not sufficient to render it usable, it must be activated first.
	// This call may:
	// - Succeed, if the package was successfully uploaded, or if the same package
	//   was already uploaded before.
	// - Respond with a gRPC error
	// Errors:
	// - ``UNAUTHENTICATED``: if the request does not include a valid access token
	// - ``PERMISSION_DENIED``: if the claims in the token are insufficient to perform a given operation
	// - ``UNIMPLEMENTED``: if DAR package uploading is not supported by the backing participant
	// - ``INVALID_ARGUMENT``: if the DAR file is too big or malformed. The maximum supported size is implementation specific.
	UploadDarFile(context.Context, *UploadDarFileRequest) (*UploadDarFileResponse, error)
	mustEmbedUnimplementedPackageManagementServiceServer()
}

// UnimplementedPackageManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackageManagementServiceServer struct {
}

func (UnimplementedPackageManagementServiceServer) ListKnownPackages(context.Context, *ListKnownPackagesRequest) (*ListKnownPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListKnownPackages not implemented")
}
func (UnimplementedPackageManagementServiceServer) UploadDarFile(context.Context, *UploadDarFileRequest) (*UploadDarFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadDarFile not implemented")
}
func (UnimplementedPackageManagementServiceServer) mustEmbedUnimplementedPackageManagementServiceServer() {
}

// UnsafePackageManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackageManagementServiceServer will
// result in compilation errors.
type UnsafePackageManagementServiceServer interface {
	mustEmbedUnimplementedPackageManagementServiceServer()
}

func RegisterPackageManagementServiceServer(s grpc.ServiceRegistrar, srv PackageManagementServiceServer) {
	s.RegisterService(&PackageManagementService_ServiceDesc, srv)
}

func _PackageManagementService_ListKnownPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListKnownPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageManagementServiceServer).ListKnownPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.daml.ledger.api.v1.admin.PackageManagementService/ListKnownPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageManagementServiceServer).ListKnownPackages(ctx, req.(*ListKnownPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PackageManagementService_UploadDarFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadDarFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PackageManagementServiceServer).UploadDarFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.daml.ledger.api.v1.admin.PackageManagementService/UploadDarFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PackageManagementServiceServer).UploadDarFile(ctx, req.(*UploadDarFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PackageManagementService_ServiceDesc is the grpc.ServiceDesc for PackageManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackageManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v1.admin.PackageManagementService",
	HandlerType: (*PackageManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListKnownPackages",
			Handler:    _PackageManagementService_ListKnownPackages_Handler,
		},
		{
			MethodName: "UploadDarFile",
			Handler:    _PackageManagementService_UploadDarFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "admin/package_management_service.proto",
}
